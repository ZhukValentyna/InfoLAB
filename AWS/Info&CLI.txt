# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                             Install AWS CLI
# https://github.com/orgs/awsdocs/repositories
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
python3 --version
sudo apt-get install awscli         - Install for Linux, need a python
aws --version

python -V
pip install awscli                  - Install for Windows, need a python
aws --version

aws configure                       - Connect to AWS console via CLI, will create a folder ./aws in ~
AWS Access key ID
AWS Secret Access Key
Default region name
Default output format

# Calculate your infrastructure
# https://calculator.s3.amazonaws.com/index.html?key=calc-66EED67E-8369-42F2-A19F-495BE8840EE6
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                   IAM -  Identity and Access Management
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# web service that helps you securely control access to AWS resources.
# You use IAM to control who is authenticated (signed in) and authorized (has permissions) to use resources.

# You can make Cross Account Access:
    * A role is created in the account to which you need to access for Account ID
    * In Trust relationships make access for another user in account by arn (default root - all)
    * Account who want access make Assume Role by arn (Default for 1h) and take credentials - in CLI
aws iam get-user
aws sts assume-role --role-arn "arn:aws:iam::xxxxxxx" --role-session "TestSessionMultiAccount"
export/set AWS_ACCESS_KEY_ID=
export/set AWS_SECRET_ACCESS_KEY=
export/set AWS_SESSION_TOKEN=
    * Or use Switch Role(Account ID & Role Name) or URL from created Role -  in Console

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Example to configure multi-account in CLI
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# in ./aws/config
[default]
region = eu-west-3
output = text

[profile reader]
region = eu-central-1
output = json

[profile writer]
region = eu-central-1
output = table

# in ./aws/credentials
[default]
aws_access_key_id =
aws_secret_access_key =

[reader]
aws_access_key_id =
aws_secret_access_key =

[writer]
aws_access_key_id =
aws_secret_access_key =

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                       S3 - Simple Storage Service
# http://zhuk.testlab.s3-website.eu-central-1.amazonaws.com/
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 99.99% availability
# 99.999999999 durability
# Max file size - 5TB via Multipart Upload
# Max file size per one PUT - 5GB
# Number of default buckets per account - 100

# *** Service types ***
# 1. Amazon S3 Standard
# 2. Amazon S3 Standard - Infrequent Access
# 3. Reduced Redundancy Storage
# 4. Amazon Glacier                   - Access to data on request during 3-5h
 _______________________________________________________________________________
|                     |               |     Standard -    |        Reduced      |
|                     |    Standard   | Infrequent Access |  Redundancy Storage |
|_____________________|_______________|___________________|_____________________|
|       Durability    | 99.999999999% |    99.999999999%  |       99.99%        |
|_____________________|_______________|___________________|_____________________|
| Concurrent facility |               |                   |                     |
|   fault tolerance   |       2       |          2        |          1          |
|_____________________|_______________|___________________|_____________________|
|     SSL support     |      Yes      |         Yes       |          Yes        |
|_____________________|_______________|___________________|_____________________|
| First byte latency  | Milliseconds  |     Milliseconds  |     Milliseconds    |
|_____________________|_______________|___________________|_____________________|
|      Lifecycle      |               |                   |                     |
| Management Policies |      Yes      |         Yes       |          Yes        |
|_____________________|_______________|___________________|_____________________|

aws s3 mb s3://name.name --profile=writer     - Create bucket with default settings in profile
aws s3 ls --profile=reader                    - Show list of buckets
aws s3 cp "D:\TMP\name" s3://name.name        - Copy file or directory
aws s3 sync . s3://name.name                  - Synchronization the current directory with bucket

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                       EC2 - Elastic Compute Cloud
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# *** Kinds of Instances ***

# 1. On Demand                                    - hourly payment
# 2. Reserved (1-3 year)                          - Price reduced by 70% when paid in full
# 3. Scheduled Reserved (daily, weekly, monthly)  - Available in regions US
# 4. Dedicated Hosts                              - Physical host binding, used in licensing

# *** Types of Instances ***

# 1. T   - General Purpose            ~ CPU 2.5Hz
# 2. M   - General Purpose
# 3. C   - Compute Optimized
# 4. F   - FPGA Optimized
# 5. G,P - GPU Optimized
# 6. X,R - RAM Memory Optimized
# 7. D,I - Storage Optimized

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#      EBS - Elastic Block Store
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# *** Types of Disks ***

# Min = 1GB, Max = 16TB

# Root-Boot:
# 1. General Purpose SSD (GP2)        - For (gp2) volumes, baseline performance scales linearly at 3 IOPS per GiB
                                      from a minimum of 100 IOPS (at 33.33 GiB and below)
                                      to a maximum of 16,000 IOPS (at 5,334 GiB and above).
# 2. General Purpose SSD (GP3)        - (gp3) volumes support a baseline of 3,000 IOPS. Additionally, you can
                                      provision up to 500 IOPS per GiB up to a maximum of 16,000 IOPS.
#         (io1 and io2) volumes support between 100 and 64,000 IOPS depending on the volume size.
# 3. Provisioned IOPS SSD (IO1)       - provision up to 50 IOPS per GiB
# 4. Provisioned IOPS SSD (IO2)       - provision up to 500 IOPS per GiB
# 5. Magnetic                         - deliver approximately 100 IOPS on average

# Other:
# 6. Cold HDD (SC1)                   - performance is measured in throughput (MiB/s)
# 7. Throughput Optimized HDD (ST1)   - performance is measured in throughput (MiB/s)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# AWS - Lifecycle Manager
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Used to make backup/snapshots of EC2 Disks
# EC2 Disk = EBS volume
# EBS volume backup = EBS snapshot

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Данные о Сервере EC2 - http://169.254.169.254/latest/meta-data/
a= `curl http://169.254.169.254/latest/meta-data/.... `
echo $a

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                       ELB - Elastic Load Balancer
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Elastic Load Balancing automatically distributes your incoming traffic across multiple targets,
# such as EC2 instances, containers, and IP addresses, in one or more Availability Zones.
# It monitors the health of its registered targets, and routes traffic only to the healthy targets.
# Elastic Load Balancing scales your load balancer capacity automatically in response to changes
# in incoming traffic

# 1. Application Load Balancers
# 2. Network Load Balancers
# 3. Gateway Load Balancers
# 4. Classic Load Balancers

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#      Application Load Balancer
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Wort at OSI Model Layer 7
# HTTP/HTTPS (or Layer 7) Traffic
# Listeners configured on ALB
# EC2 Registered with TargetGroups only and not within Load Balancer

# Content-based routing per rules:
  * Host: app1.testlab.ml
  * Path: www.testlab.ml/forum

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#      Network Load Balancer
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# TCP (or Layer 4) traffic
# Listeners configured on NLB
# EC2 Registered with TargetGroups only and not within Load Balancer
# If you need SSL, you need to configure it on EC2

# Port-based routing only

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#      Auto Scaling Group
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Vertical scaling - t2.micro -> t2.medium -> t2.large
# Horizontal scaling used in Auto scaling, add clone of instance
# Scale out - increase
# Scale in - reduce

              ----> Launch Configuration : describes what instance to start
Auto Scaling |
              ----> Auto Scaling Group : describes how many to start and when to add and remove

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                       VPC - Virtual Private Cloud
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# VPC can be created for one region and for all availability zones
# Max size of CIDR block - /16 -5 ip reserved by AWS
# Min size of CIDR block - /28 -5 ip reserved by AWS
# VPC can consist max of 5 CIDR blocks

# Public subnet - all instances have public ip, direct access to the Internet
# Private subnet - all instances don`t have public ip, access to the Internet via NAT
# Database subnet - doesn`t have access to the internet

# VPC Flow logs can be enabled on:
          * VPC
          * Subnet
          * Interface
#  Needs IAM Role with access to Cloud Watch

# VPC Peering used to connect multiple VPS. Must be different CIDR blocks!
# In-region VPC peering
# Inter-region VPC peering
# Cross-account VPC peering

#VPC Endpoint - Internal access to AWS services

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                                Cloud Formation
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Infrastructure as a Code - IaaC
# Automating the creation and modification of infrastructure
# CloudFormation Stack - Container with created resources
# CloudFormation Template - Program code describing what to create, in yaml or json format

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                      SNS - Simple Notification Service
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Push Notification
# Allows you to publish messages, works as a mailing list.
# Consists of topic and subscribers:
                                    * HTTP
                                    * HTTPS
                                    * Email
                                    * Email-JSON
                                    * Amazon SQS
                                    * Application
                                    * AWS Lambda
                                    * SMS

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                      SQS - Simple Queue Service
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# First service in AWS
# Pull Based system
# Allows you to send messages to the queue, and other services receive these messages through pull requests
# Works as temporary storage, with guaranteed delivery at least once
# Allows you to DECOUPLE system components
# Max size of message - 256KB in any format

# Standard Queue - without FIFO (First IN First Out). Use Index to solve problem
# FIFO Queue - with FIFO, a little more expensive
# Retention Period - from 1m to 14d. By default 4d
# Visibility TimeOut - the time for which a message disappears from the queue after it is received.
                       If there was no command (DeleteMessage) during this time, the message is returned to the queue.
                       Can change (ChangeMessageVisibility) Max 12h, by default 30s
# Long Polling - delay checking for new messages in the queue, by default 1s, max 20s
# InFlight Messages in Standard Queue - 120.000
# InFlight Messages in FIFO Queue - 20.000
# Dead-Letter Queue - message that cannot be processed

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                     CDN - Content Delivery Network (Cloud Front)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Consists of Edge Locations
# Used to cash of static content
# Default TTL of cash - 24h, Max - 365d
 __________________________________________________________________________
|                       |                            |                     |
|   Price class All+>   |        Price class 200 +>  |   Price class 100   |
|_______________________|____________________________|_____________________|
|     South America     |            Japan           |    United States    |
|_______________________|____________________________|_____________________|
|       Australia       |            India           |        Europe       |
|_______________________|____________________________|_____________________|
|                       |   Hong Kong, Philippines   |                     |
|                       | S.Korea, Singapore, Taiwan |        Canada       |
|_______________________|____________________________|_____________________|

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                              Elastic Beanstalk
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Allows you to very quickly raise the infrastructure for your application.
# It is also very easy and fast to update your code, including reverting to a previous version.
# Related to CD(continuous deployment) technology
# Enables easy implementation of devops green/blue deployment method
# Supports the following platforms:
                                    * Java
                                    * .NET
                                    * PHP
                                    * Node.js
                                    * Python
                                    * Ruby
                                    * Go
                                    * Docker
# .ebextensions - *.config files with settings allow full customization of the infrastructure
# https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/ebextensions.html
# Types of command in *.config files:
      * packages - download and install programs (yum, rpm, msi)
      * sources - download archive and unpack (tar, gzip, zip)
      * files - create files (can download used source)
      * users - only Linux
      * groups - only Linux
      * commands - run system commands before unpack application
      * container_commands - run system commands after unpack application
      * services - stop/start services
      * Resources - create additional AWS resources (CloudFormation)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                       RDS - Relation Database Service
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Public or Private Endpoint
# Read Replica
# Backup Snapshots Automatic - erased when removed RDS Instances
# Backup Snapshots Manual - not erased when removed RDS Instances
# Multi AZ - creating an additional synchronized instance in other Availability Zone
             Used for Fail Tolerance
# Engine Type:
                * Amazon aurora
                * MySQL
                * MariaDB
                * PostgreSQL
                * Oracle
                * Microsoft SQL Server
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#    Migration DB to AWS RDS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 1. Create S3 bucket in same Region as RDS and upload your .bak files
# 2. Create new RDS OptionGroup with SQLSERVER_BACKUP_RESTORE option
# 3. Apply this OptionGroup to your RDS instead of default OptionGroup
# 4. Connect to RDS, open NewQuery, and execute stored procedure:

      exec msdb.dbo.rds_restore_database
          @restore_db_name='MyDB',
          @s3_arn_ro_restore_from='arn:aws:s3:::mybucketwith-backup/MyDB.bak';
      exec msdb.dbo.rds_task_status;

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                       SSM - Simple system Manager
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                Node Management
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# You must add IAM Roles to EC2 instances (ssm)
# You can add your local servers to SSM - hybrid environments
# https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-managedinstances.html

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#         Maintenance Windows
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Schedule instance maintenance and other disruptive tasks for a specific time window,
# and execute those tasks fleet-wide from a central location.

# You must add IAM Role to EC2 instances (maintenance) with different Trust relationships:
# https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-maintenance-perm-console.html

# Create time window -> Create target -> Register tasks(run commands, lambda, automation)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#             Parameter Store
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Centralized storage and management of your secrets and configuration data such as passwords,
# database strings, and license codes. You can encrypt values, or store as plain text.

export DBPASSWORD=`aws ssm get-parameters --name DBpassword --region us-east-1 --with-decryption --output text --query Parameters[].Value`
export DBUSERNAME=`aws ssm get-parameters --name DBusername --region us-east-1 --output text --query Parameters[].Value`
export DBENDPOINT=`aws ssm get-parameters --name DBendpoint --region us-east-1 --output text --query Parameters[].Value`

# Simple policy of IAM Role for EC2
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": "ssm:GetParameters",
            "Resource": "*"
        }
    ]
}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                                Route 53
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# DNS management: You can create host zones using the current AWS account
# Traffic management: You can use traffic flow and create traffic policy records
# Availability monitoring: Use health checking to monitor the status of your resources, work with SNS
# Domain registration

# Routing policy:
  * Failover routing policy – Use when you want to configure active-passive failover.
  * Geolocation routing policy – Use when you want to route traffic
    based on the location of your users.
  * Geoproximity routing policy – Use when you want to route traffic based on the location of your
    resources and, optionally, shift traffic from resources in one location to resources in another.
  * Latency routing policy – Use when you have resources in multiple AWS Regions
    and you want to route traffic to the region that provides the best latency.
  * IP-based routing policy – Use when you want to route traffic based on the location of your users,
    and have the IP addresses that the traffic originates from.
  * Multivalue answer routing policy – Use when you want Route 53 to respond to DNS queries
    with up to eight healthy records selected at random.
  * Weighted routing policy – Use to route traffic to multiple resources in proportions that you specify.
  * Simple routing policy – Use for a single resource that performs a given function for your domain

# Make Cross Region Load Balancer with weighted or latency routing policy. Use with health checking

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                               Directory Services
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  * Simple AD
  * Managed Microsoft AD
  * AD Connector
  * Amazon Cognito
  * CloudDirectory

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#              Simple AD
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# standalone managed directory that is powered by a Samba 4 Active Directory Compatible Server.
# It is available in two sizes:
  * Small ~ 500 users (approximately 2,000 objects including users, groups, and computers).
  * Large ~ 5000 users (approximately 20,000 objects including users, groups, and computers).

# Simple AD does not support features:
 * multi-factor authentication (MFA)
 * trust relationships with other domains
 * Active Directory Administrative Center
 * PowerShell support
 * Active Directory recycle bin
 * group managed service accounts
 * schema extensions for POSIX and Microsoft applications.

# For join domain EC2 needs IAM Role (SSM Policy)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#         Managed Microsoft AD
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Powered by Windows Server 2012 R2. Created as a highly available pair of domain controllers connected to your VPC.
# It is available in two editions:
  * Standard Edition - designed to support 5000 employees (approximately 30,000 objects including users, groups, and computers).
  * Enterprise Edition - designed to support 500,000 directory objects

# Support FSx - Highly available shared disk for Windows and Linux

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                     EFS - Amazon Elastic File System
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Highly available shared disk for Linux (Type NFS port 2049)

#Encryption In Transit Disabled

sudo yum install amazon-efs-utils
sudo mkdir /efs-disk
sudo mount -t efs fs-xxxyyyid(file system ID):/ /efs-disk
sudo echo "fs-xxxyyyid:/ /efs-disk efs defaults,_netdev 0 0" >> /etc/fstab    - enable automount
sudo mount -l                                                                 - list

#Encryption In Transit Enables

sudo yum install amazon-efs-utils
sudo mkdir /efs-disk
sudo mount -t efs -o tls fs-xxxyyyid(file system ID):/ /efs-disk
sudo echo "fs-xxxyyyid:/ /efs-disk efs tls,_netdev 0 0" >> /etc/fstab

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                           Elastic Container Service
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
