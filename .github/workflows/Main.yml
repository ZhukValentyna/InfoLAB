#---------------------------------------------------------------------
# GitHub Action Workflow InfoLAB
#---------------------------------------------------------------------
name: GitHubActions-InfoLAB
env:
  APPLICATION_NAME    : "MyFlask"
  DEPLOY_PACKAGE_NAME : "flask-deploy-ver-${{ github.sha }}"

on: 
  push:
    branches: 
      - main

jobs:
  my_test1:
    runs-on: ubuntu-latest

    steps:
    - name: Print Hello Message in Testing
      run : echo "Hello World from Testing job"
    
    - name: Execure few commands
      run : |
        echo "Hello Message1"
        echo "Hello Message2"
        echo "Appication name: ${{ env.APPLICATION_NAME }}"
    
    - name: List current folder
      run : ls -la
   
    - name: Git clone my repo
      uses: actions/checkout@v1   
  
    - name: List current folder
      run : ls -la
  
  my_test2:
    runs-on: ubuntu-latest
    needs: [my_test1]
    env:
      VAR1 : "This is Job Level Variable1"
      VAR2 : "This is Job Lebel Variable2"
    
    steps:
    - name: Print Hello Message in Test2
      run : echo "Hello World from Test2 job"
      
    - name: Print env vars
      run : |
        echo "Var1 = ${{ env.VAR1 }}"
        echo "Var2 = ${{ env.VAR2 }}"
        echo "Var3 = $LOCAL_VAR"
      env:
        LOCAL_VAR: "This is Super local Environment variable"

    
    - name: Printing Deployment package
      run : echo "Deploy pakcage name is ${{ env.DEPLOY_PACKAGE_NAME }}"
    
    - name: Lets test some packages if they are here 1
      run : aws --version
      
    - name: Lets test some packages if they are here 2
      run : zip --version
#---------------------------------------------------------------------
# GitHub Action Workflow to Deploy Flask App to AWS ElasticBeanstalk
#---------------------------------------------------------------------
#name: CI-CD-Pipeline-to-AWS-ElasticBeastalk
#env:
#  EB_PACKAGE_S3_BUCKET_NAME : "adv-it-flask-application-packages"
#  EB_APPLICATION_NAME       : "MyFlask"
#  EB_ENVIRONMENT_NAME       : "MyFlask-env"
#  DEPLOY_PACKAGE_NAME       : "flask_app_${{ github.sha }}.zip"
#  AWS_REGION_NAME           : "us-west-2"

#on: 
#  push:
#    branches: 
      - main
#jobs:
#  my_ci_part:
#    runs-on: ubuntu-latest

#    steps:
#    - name: Git clone our repo
#      uses: actions/checkout@v1
       
#    - name: Create ZIP deployment package
#      run : zip -r ${{ env.DEPLOY_PACKAGE_NAME }} ./ -x *.git*
      
#    - name: Configure my AWS Credentials
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        aws-access-key-id    :  ${{ secrets.MY_AWS_ACCESS_KEY }}
#        aws-secret-access-key:  ${{ secrets.MY_AWS_SECRET_KEY }}
#        aws-region           :  ${{ env.AWS_REGION_NAME }}
        
#    - name: Copy Deployment package to S3 bucket
#      run : aws s3 cp ${{ env.DEPLOY_PACKAGE_NAME }}  s3://${{ env.EB_PACKAGE_S3_BUCKET_NAME }}/
    
#    - name: Print Happy Message for CI finish
#      run : echo "CI Pipeline part Finished successfully!"


#  my_cd_part:
#    runs-on: ubuntu-latest
#    needs: [my_ci_part]

#    steps:
#    - name: Configure my AWS Credentials
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        aws-access-key-id    :  ${{ secrets.MY_AWS_ACCESS_KEY }}
#        aws-secret-access-key:  ${{ secrets.MY_AWS_SECRET_KEY }}
#        aws-region           :  ${{ env.AWS_REGION_NAME }}
    
#    - name: Create new ElasticBeanstalk Application Version
#      run : |
#        aws elasticbeanstalk create-application-version \
#        --application-name ${{ env.EB_APPLICATION_NAME }} \
#        --source-bundle S3Bucket="${{ env.EB_PACKAGE_S3_BUCKET_NAME }}",S3Key="${{ env.DEPLOY_PACKAGE_NAME }}" \
#        --version-label "Ver-${{ github.sha }}" \
#        --description "CoimmitSHA-${{ github.sha }}"
       
#    - name: Deploy new ElasticBeanstalk Application Version
#      run : aws elasticbeanstalk update-environment --environment-name ${{ env.EB_ENVIRONMENT_NAME }} --version-label "Ver-${{ github.sha }}"
      
#    - name: Print Happy Message for CD finish
#      run : echo "CD Pipeline part Finished successfully!"
      
  
